(window.webpackJsonp=window.webpackJsonp||[]).push([[75],{426:function(a,t,s){"use strict";s.r(t);var _=s(42),v=Object(_.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h4",{attrs:{id:"java运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java运算符"}},[a._v("#")]),a._v(" Java运算符")]),a._v(" "),s("h5",{attrs:{id:"_1-算术运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-算术运算符"}},[a._v("#")]),a._v(" 1.算术运算符")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("+")]),a._v(" 表示加法运算符")]),a._v(" "),s("li",[s("code",[a._v("-")]),a._v(" 表示减法运算符")]),a._v(" "),s("li",[s("code",[a._v("*")]),a._v(" 表示乘法运算符")]),a._v(" "),s("li",[s("code",[a._v("/")]),a._v(" 表示除法运算符")]),a._v(" "),s("li",[s("code",[a._v("%")]),a._v(" 表示取模/取余运算符")]),a._v(" "),s("li",[s("code",[a._v("java")]),a._v("中不同类型的数字可以运算，但是结果会转成大的类型。")])]),a._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" operation "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("byte")]),a._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 小类型和大类型运算会先将小类型转成大类型")]),a._v("\n        a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("byte")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"a ="')]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" a "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br")])]),s("h5",{attrs:{id:"_2-字符串连接运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-字符串连接运算符"}},[a._v("#")]),a._v(" 2.字符串连接运算符")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("+")]),a._v(" 可以实现字符串的连接。同时可以实现字符串与其他数据类型“相连”。")])]),a._v(" "),s("h5",{attrs:{id:"_3-关系-比较运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-关系-比较运算符"}},[a._v("#")]),a._v(" 3.关系/比较运算符")]),a._v(" "),s("ul",[s("li",[s("code",[a._v(">")]),a._v(" 表示是否大于运算符")]),a._v(" "),s("li",[s("code",[a._v("<")]),a._v(" 表示是否小于运算符")]),a._v(" "),s("li",[s("code",[a._v("==")]),a._v("表示是否等于运算符")]),a._v(" "),s("li",[s("code",[a._v("!=、>=、<=")])]),a._v(" "),s("li",[a._v("所有以关系运算符作为最终运算的表达式结果一定是boolean类型。")])]),a._v(" "),s("h5",{attrs:{id:"_4-自增减运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-自增减运算符"}},[a._v("#")]),a._v(" 4.自增减运算符")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("++")]),a._v(" 表示自增运算符，用于使得当前变量自身的数值加1的效果")]),a._v(" "),s("li",[s("code",[a._v("--")]),a._v(" 表示自减运算符，用于使得当前变量自身的数值减1的效果")]),a._v(" "),s("li",[a._v("只能用于变量，常数不可以")])]),a._v(" "),s("h5",{attrs:{id:"_5-逻辑运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-逻辑运算符"}},[a._v("#")]),a._v(" 5.逻辑运算符")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("&&")]),a._v(' 表示逻辑与运算符，相当于"并且"，同真为真，一假为假。')]),a._v(" "),s("li",[s("code",[a._v("||")]),a._v(' 表示逻辑或运算符，相当于"或者"，一真为真，同假为假。')]),a._v(" "),s("li",[s("code",[a._v("!")]),a._v(' 表示逻辑非运算符，相当于"取反"，真为假，假为真。')]),a._v(" "),s("li",[a._v("逻辑运算符的操作数均为boolean表达式。")]),a._v(" "),s("li",[a._v("对于逻辑与运算符来说，若第一个表达式为假则结果为假，此时跳过第 二个表达式;")]),a._v(" "),s("li",[a._v("对于逻辑或运算符来说，若第一个表达式为真则结果为真，此时跳过第 二个表达式;")])]),a._v(" "),s("h5",{attrs:{id:"_6-条件-三目运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-条件-三目运算符"}},[a._v("#")]),a._v(" 6.条件/三目运算符")]),a._v(" "),s("ul",[s("li",[a._v("条件表达式? 表达式1: 表达式2")]),a._v(" "),s("li",[a._v("判断条件表达式是否成立，若成立则执行表达式1，否则执行表达式2 。")])]),a._v(" "),s("h5",{attrs:{id:"_7-赋值运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-赋值运算符"}},[a._v("#")]),a._v(" 7.赋值运算符")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("=")]),a._v(" 表示赋值运算符，用于将=右边的数据赋值给=左边的变量，覆盖变量 原来的数值。")]),a._v(" "),s("li",[a._v("赋值表达式本身也有值，其本身之值即为所赋之值。 "),s("code",[a._v("- +=、 -=、 *=、 /=、 ...")])])]),a._v(" "),s("h5",{attrs:{id:"_8-1移位运算符-了解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-1移位运算符-了解"}},[a._v("#")]),a._v(" 8.1移位运算符(了解)")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("<<")]),a._v(" 左移运算符，用于将数据的二进制位向左移动，右边使用0补充")]),a._v(" "),s("li",[s("code",[a._v(">>")]),a._v(" 右移运算符，用于将数据的二进制位向右移动，左边使用符号位补充")]),a._v(" "),s("li",[s("code",[a._v(">>>")]),a._v(" 表示逻辑右移运算符，用于将数据的二进制位向右移动，左边使用0 补充。")])]),a._v(" "),s("h5",{attrs:{id:"_8-2位运算符-了解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-2位运算符-了解"}},[a._v("#")]),a._v(" 8.2位运算符(了解)")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("&")]),a._v(" 表示按位与运算符，按照二进制位进行与运算，同1为1，一0为0.")]),a._v(" "),s("li",[s("code",[a._v("|")]),a._v(" 表示按位或运算符，按照二进制位进行或运算，一1为1，同0为0.")]),a._v(" "),s("li",[s("code",[a._v("~")]),a._v(" 表示按位取反运算符，按照二进制位进行取反，1为0，0为1.")]),a._v(" "),s("li",[s("code",[a._v("^")]),a._v(" 表示按位异或运算符，按照二进制位进行异或运算，同为0，不同为1.")])]),a._v(" "),s("h5",{attrs:{id:"_9-运算符的优先级"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_9-运算符的优先级"}},[a._v("#")]),a._v(" 9.运算符的优先级")]),a._v(" "),s("ul",[s("li",[a._v("()的优先级极高。")]),a._v(" "),s("li",[a._v("=的优先级极低。")]),a._v(" "),s("li",[a._v("&& 的优先级高于 ||。")]),a._v(" "),s("li",[a._v("若无法确认优先级，则使用()来确保即可。")])])])}),[],!1,null,null,null);t.default=v.exports}}]);